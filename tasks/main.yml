---
- name: Verify presence of variables
  fail:
    msg: You need to define at least one of 'docker_deploy_stack_template', 'docker_deploy_compose_template' or 'docker_deploy_shell_start' variable.
  when: docker_deploy_stack_template   is not defined 
    and docker_deploy_compose_template is not defined 
    and docker_deploy_shell_start      is not defined
  tags: docker_deploy

- name: Verify presence of variables
  fail:
    msg: You need to define the both 'docker_deploy_stack_name' and 'docker_deploy_stack_template'
  when: docker_deploy_stack_name is not defined and docker_deploy_stack_template is defined
  tags: docker_deploy

- name: Create root directory
  file:
    path: "{{ docker_deploy_base_folder }}"
    state: directory
  tags: docker_deploy

- name: Install git
  package: 
    name: git
    state: present
  when: docker_deploy_git_repositories is defined and ( docker_deploy_git_repositories | length ) > 0
  tags: docker_deploy

- name: Install deployment ssh key
  copy:
    dest: "{{ item.dest + 'ssh_key' }}"
    content: "{{ item.ssh_key }}"
    mode: "0600"
  no_log: True
  with_items: "{{ docker_deploy_git_repositories | selectattr('ssh_key', 'defined') | list }}"
  when: docker_deploy_git_repositories is defined
  tags: docker_deploy

- name: Update git repository source code
  git: 
    repo: "{{ item.repo }}"
    dest: "{{ item.dest }}"
    force: "{{ item.force | default(omit) }}"
    version: "{{ item.version | default(omit) }}"
    accept_hostkey: yes
    key_file: "{{ ( item.dest + 'ssh_key' ) if item.ssh_key is defined else omit }}"
  loop_control:
    label: "{{ item.repo }}"
  with_items: "{{ ( docker_deploy_git_repositories | selectattr('service', 'in', limited_services.split(',') ) ) if limited_services is defined else docker_deploy_git_repositories }}"
  when: docker_deploy_git_repositories is defined
  register: docker_deploy_git_repositories_out
  tags: docker_deploy

- name: Remove deployment ssh key
  file:
    dest: "{{ item.dest + 'ssh_key' }}"
    state: absent
  no_log: True
  with_items: "{{ docker_deploy_git_repositories | selectattr('ssh_key', 'defined') | list }}"
  when: docker_deploy_git_repositories is defined
  tags: docker_deploy

- name: Set permissions to git destination folders
  file:
    path: "{{ item.dest }}"
    state: directory
    owner: "{{ item.owner }}"
    group: "{{ item.group }}" 
    mode: "{{ item.mode }}"
    recurse: yes
  loop_control:
    label: "{{ item.dest }}"
  with_items: "{{ docker_deploy_git_repositories | selectattr('owner', 'defined') | list }}"
  when: docker_deploy_git_repositories is defined
  tags: docker_deploy

- name: Define fact for each git repository update
  set_fact:
    "{{ item.0.fact }}": "{{ item.1.after }}"
  loop_control:
    label: "{{ item.0.dest }}"
  when: item.0.fact is defined
  with_together:
    - "{{ docker_deploy_git_repositories              | default( [] ) }}"
    - "{{ docker_deploy_git_repositories_out.results  | default( [] ) }}"
  tags: docker_deploy

- name: Create folders
  file:
    dest: "{{ item.dest | dirname }}"
    owner: "{{ item.dir_owner|default(omit) }}"
    group: "{{ item.dir_group|default(omit) }}"
    mode: "{{ item.dir_mode | default(omit) }}"
    recurse: true
    state: directory
  loop_control:
    label: "{{ item.dest }}"
  with_items: "{{ docker_deploy_folders }}"
  tags: docker_deploy

- name: Copy files
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0644') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
  when: item.when | default(true) | bool
  with_items: "{{ ( docker_deploy_files | selectattr('service', 'in', limited_services.split(',') ) ) if limited_services is defined else docker_deploy_files }}"
  loop_control:
    label: "{{ item.dest }}"
  register: docker_deploy_files_out
  tags: docker_deploy

- name: Template files
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode | default('0644') }}"
    owner: "{{ item.owner | default('root') }}"
    group: "{{ item.group | default('root') }}"
    backup: "{{ item.backup | default(omit) }}"
  when: item.when | default(true) | bool
  with_items: "{{ ( docker_deploy_templates | selectattr('service', 'in', limited_services.split(',') ) ) if limited_services is defined else docker_deploy_templates }}"
  loop_control:
    label: "{{ item.dest }}"
  register: docker_deploy_templates_out
  tags: docker_deploy

- name: Deploy docker configs
  docker_config:
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    state: present
    force: "{{ item.force | default(omit) }}"
    labels: "{{ item.labels | default(omit) }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ docker_deploy_configs }}"
  tags: docker_deploy

- name: Deploy docker secrets
  docker_secret:
    name: "{{ item.name }}"
    data: "{{ item.data }}"
    state: present
    force: "{{ item.force | default(omit) }}"
    labels: "{{ item.labels | default(omit) }}"
  loop_control:
    label: "{{ item.name }}"
  loop: "{{ docker_deploy_secrets }}"
  tags: docker_deploy

- name: Remove old docker containers
  docker_container: 
    name: "{{ item }}"
    state: absent
  with_items: "{{ docker_containers_to_remove | default([]) }}"
  tags: docker_deploy

- name: Deploy docker using shell directly
  include_tasks: docker-deploy-shell.yml
  when: docker_deploy_shell_start is defined or docker_deploy_shell_stop is defined or ( docker_deploy_shell | default (false) | bool )
  tags: docker_deploy

- name: Deploy docker compose
  include_tasks: docker-deploy-compose.yml
  when: docker_deploy_compose_template is defined and not ( docker_deploy_shell | default (false) | bool )
  tags: docker_deploy

- name: Wait until docker health checks are healthy or ignore it if no docker healthcheck configured
  shell: docker {% raw %} ps --format "{{.Status}}" | awk -F"[()]" '{print $2}' | awk 'NF' | sort | uniq{% endraw %}
  register: docker_healthcheck_out
  until: docker_healthcheck_out.stdout is not defined or docker_healthcheck_out.stdout == 'healthy' or docker_healthcheck_out.stdout == ''
  retries: "{{ docker_deploy_healthcheck_retries | default(20) }}"
  delay: "{{ docker_deploy_healthcheck_delay | default(omit) }}"
  when: ( docker_deploy_shell_start is defined or docker_deploy_compose_template is defined ) and ( docker_deploy_healthcheck | default(true) )
  changed_when: false # shell command don't change anything on the server
  tags: docker_deploy

- name: Deploy docker stack to swarm
  include_tasks: docker-deploy-stack.yml
  when: docker_deploy_stack_template is defined
  tags: docker_deploy
